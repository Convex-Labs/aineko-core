# Copyright 2023 Aineko Authors
# SPDX-License-Identifier: Apache-2.0
version: 2.1

parameters:
  python_version:
    description: Version to python to use
    type: string
    default: "3.10"
  mkdocs_material_version:
    description: Version of mkdocs-material-insiders to use
    type: string
    default: "9.5.2-insiders-4.47.1"

orbs:
  vale: circleci/vale@1.1.1

workflows:
  continuous-integration:
    jobs:
      - python-checks:
          matrix:
            parameters:
              python_version:
                - "3.8"
                - "3.9"
                - "3.10"
                - "3.11"
          python_version: << matrix.python_version >>
          filters:
            branches:
              ignore: develop
          prj_dir: aineko
          # python_version: << matrix.python_version >>
          markers: "not integration"
      - integration-tests:
          matrix:
            parameters:
              python_version:
                - "3.8"
                - "3.9"
                - "3.10"
                - "3.11"
          # python_version: << matrix.python_version >>
          prj_dir: aineko
          markers: integration
          requires:
            - python-checks
      - test-aineko-create:
          requires:
            - python-checks

  publish-docs:
    jobs:
      - check-broken-links
      - vale/lint:
          name: lint docs
          strategy: all
          glob: "[!.]*.{md,adoc}"
      - build-and-push-docs:
          name: publish dev docs
          filters:
            branches:
              only: develop
      - build-and-push-docs:
          name: publish versioned docs
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /\d+\.\d+\.\d+$/
          version: << pipeline.git.tag >>
          tag: true
      - build-and-push-docs:
          name: publish staging docs
          docs_branch: docs-staging
          version: << pipeline.git.branch >>
          filters:
            branches:
              only: /^docs\/.*/

jobs:
  integration-tests:
    parameters:
      python_version:
        type: string
        default: "3.10"
        description: Version of python to use
      prj_dir:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
        description: Directory of codebase to execute checks
      test_dir:
        type: string
        default: tests
        description: Test directory
      markers:
        type: string
        default: integration
        description: Markers to run pytest for

    docker:
      - image: cimg/python:<< parameters.python_version >>
      - image: confluentinc/cp-zookeeper:7.3.0
        name: zookeeper
        environment:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
      - image: confluentinc/cp-kafka:7.3.0
        environment:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
          KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

    steps:
      - checkout
      - run: poetry install --with test --no-interaction --all-extras --no-ansi
      - run: >
          poetry run pytest << parameters.test_dir >>
          -m "<< parameters.markers >>"

  python-checks:
    parameters:
      python_version:
        type: string
        default: "3.10"
        description: Version of python to use
      prj_dir:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
        description: Directory of codebase to execute checks
      test_dir:
        type: string
        default: tests
        description: Test directory
      markers:
        type: string
        default: ""
        description: Markers to run pytest for

    docker:
      - image: cimg/python:<< parameters.python_version >>

    steps:
      - checkout
      - run: poetry install --with dev,test --no-interaction --all-extras --no-ansi
      - run: poetry run isort << parameters.prj_dir >>
      - run: >
          poetry run black << parameters.prj_dir >> --check --exclude
          .*{{cookiecutter.project_slug}}\/tests\/.*.py
      - run: poetry run pydocstyle << parameters.prj_dir >>
      - run: poetry run pylint << parameters.prj_dir >>
      - run: poetry run yamllint -c yamllint.yaml << parameters.prj_dir >>
      - run: |
          poetry run pre-commit install
          poetry run pre-commit run --all
      - run: >
          poetry run pytest
          --cov=<< parameters.prj_dir >> << parameters.test_dir >>
          -m "<< parameters.markers >>"
      - run:
          name: mypy
          command: |
            poetry run mypy --install-types \
            --non-interactive << parameters.prj_dir >>
            poetry run mypy << parameters.prj_dir >>

  build-and-push-docs:
    parameters:
      docs_branch:
        type: string
        default: docs-site
        description: Branch to publish docs site files to
      version:
        type: string
        default: dev
        description: Version of docs to publish
      tag:
        type: boolean
        default: false
        description: If version is a tag
    docker:
      - image: cimg/python:<< pipeline.parameters.python_version >>
    steps:
      - add_ssh_keys:
          fingerprints:
            - "44:55:52:46:cf:d7:60:1d:8e:99:d4:f8:e8:8b:45:d2"
      - checkout
      - run: poetry add git+ssh://git@github.com/squidfunk/mkdocs-material-insiders.git#<<
          pipeline.parameters.mkdocs_material_version >> --group docs --no-interaction
          --quiet
      - run: poetry install --with docs --no-interaction --quiet
      - run: git config user.name aineko-ci
      - run: git config user.email engineering-admins@convexlabs.xyz
      - run: |
          if [ "<< parameters.tag >>" = "true" ]; then
            version=$(echo "<< parameters.version >>" | cut -d'.' -f1,2)
            poetry run mike deploy $version latest -b << parameters.docs_branch >> --push --update-aliases
            poetry run mike set-default $version -b << parameters.docs_branch >> --push
          else
            version="<< parameters.version >>"
            poetry run mike deploy ${version##*/} -b << parameters.docs_branch >> --push
          fi

  check-broken-links:
    description: Check for broken links in markdown files
    docker:
      - image: ghcr.io/tcort/markdown-link-check:stable
    steps:
      - checkout
      - run:
          name: check broken links
          command: >
            find . -name "*.md" -print0 | xargs -0 -n1 markdown-link-check
            --quiet --config .circleci/markdown-links-config.json

  test-aineko-create:
    description: This job tests the aineko create command by creating a new project
      and running the tests from the newly created project.
    docker:
      - image: cimg/python:<< pipeline.parameters.python_version >>
    steps:
      - checkout
      - run:
          name: Install Aineko from source, simulating a "pip install aineko"
          command: |
            cd ..
            echo "export original_cwd=$(pwd)" >> $BASH_ENV
            pip install project/
      - run:
          name: Test Aineko create command
          command: |
            cd $original_cwd
            aineko create --no-input
      - run:
          name: Test installing the newly created project
          command: |
            cd $original_cwd/my_awesome_pipeline
            poetry add git+$CIRCLE_REPOSITORY_URL#<< pipeline.git.branch >> --no-interaction --no-ansi
            poetry install --no-interaction --no-ansi
      - run:
          name: Run the tests from the newly created project
          command: |
            cd $original_cwd/my_awesome_pipeline
            poetry run pytest
      - run:
          name: Run `poetry run aineko --help` command from the newly created project
          command: |
            cd $original_cwd/my_awesome_pipeline
            poetry run aineko --help
      - run:
          name: Run `aineko --help` command from the newly created project
          command: |
            cd $original_cwd/my_awesome_pipeline
            aineko --help
